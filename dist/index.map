{"version":3,"sources":["index.js"],"names":["module","exports","cplBoxStyle","backgroundColor","border","color","fontFamily","fontSize","fontWeight","margin","padding","position","transition","top","left","opacity","willChange","Object","assign","cplElement","style","styleSelection","styleElem","document","createElement","styleNode","createTextNode","appendChild","head","textContent","body","addEventListener","debounce","fn","time","timeout","clearTimeout","setTimeout","apply","arguments","selected","window","getSelection","selectedLength","toString","length","getPosition","element","xPosition","yPosition","tagName","offsetLeft","clientLeft","offsetTop","clientTop","offsetParent","anchorNode","parentElement","offsetHeight"],"mappings":";AAAAA,OAAOC,QAAU,WAGTC,IAAAA,EAAc,CAClBC,gBAAiB,QACjBC,OAAQ,OACRC,MAAO,OACPC,WAAY,eACZC,SAAU,OACVC,WAAY,OACZC,OAAQ,EACRC,QAAS,YACTC,SAAU,WACVC,WAAY,mBACZC,IAAK,EACLC,KAAM,EACNC,QAAS,EACTC,WAAY,sBAKZC,OAAOC,OAAOC,EAAWC,MAAOlB,GAS5BmB,IAQAC,EAAYC,SAASC,cAAc,SAEnCC,EAAYF,SAASG,eAV3B,sFAYAJ,EAAUK,YAAYF,GAEtBF,SAASK,KAAKD,YAAYL,GAGpBH,IAAAA,EAAaI,SAASC,cAAc,OAE1CL,EAAWU,YAAc,MAEzBN,SAASO,KAAKH,YAAYR,GAM1BI,SAASQ,iBACP,kBA6BOC,SAASC,GAAIC,IAChBC,EADgBD,EAAO,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,IAGpB,OAAA,WAAW,IAAA,EAAA,KAAA,EAAA,UAGhBE,aAAaD,GACbA,EAAUE,WAHS,WAAMJ,OAAAA,EAAGK,MAAM,EAAMC,IAGLL,IAnCrCF,CAAS,WACHQ,IAAAA,EAAWC,OAAOC,eAElBC,EADiBH,EAASI,WACMC,OACLC,EAwC1BA,SAAYC,GAEfC,IAAAA,EAAY,EACZC,EAAY,EAITF,KAAmB,QAAnBA,EAAQG,SACbF,GAAaD,EAAQI,WAAaJ,EAAQK,WAC1CH,GAAaF,EAAQM,UAAYN,EAAQO,UAGzCP,EAAUA,EAAQQ,aAIb,MAAA,CAAEP,UAAAA,EAAWC,UAAAA,GAxDaH,CAC7BN,EAASgB,WAAWC,eADhBT,EAAAA,EAAAA,UAAWC,EAAAA,EAAAA,UAIbN,GAAAA,EAAiB,EAInB,OAHAxB,EAAWC,MAAMP,IAAM,EACvBM,EAAWC,MAAMN,KAAO,OACxBK,EAAWC,MAAML,QAAU,GAK7BI,EAAWU,YAAsBc,QAAAA,OAAAA,GACjCxB,EAAWC,MAAMP,IAAMoC,EAAY9B,EAAWuC,aAAe,KAC7DvC,EAAWC,MAAMN,KAAOkC,EAAY,KACpC7B,EAAWC,MAAML,QAAU","file":"index.map","sourceRoot":"../src","sourcesContent":["module.exports = () => {\n  // Set the element's style with JS so we don't need to include a stylesheet\n  // Let's make a style object to keeps styling managable\n  const cplBoxStyle = {\n    backgroundColor: \"black\",\n    border: \"none\",\n    color: \"#0f0\",\n    fontFamily: \"Trebuchet MS\",\n    fontSize: \"20px\",\n    fontWeight: \"bold\",\n    margin: 0,\n    padding: \"10px 20px\",\n    position: \"absolute\",\n    transition: \"all .05s ease-in\",\n    top: 0,\n    left: 0,\n    opacity: 0,\n    willChange: \"top, left, opacity\"\n  };\n\n  // Assign the style object\n  const setStylesOnElement = function(styles, element) {\n    Object.assign(cplElement.style, cplBoxStyle);\n  };\n  setStylesOnElement();\n\n  // Not using this anymore, but keeping it around as a reminder\n  // cplElement.classList.add(\"cpl__box\");\n\n  // We want to inject this style into the head so we can style any element\n  // that has it's text selected\n  const styleSelection = `\n    ::selection {\n      background-color: #0f0;\n      color: black;\n    }\n  `;\n\n  // Create a style element\n  const styleElem = document.createElement(\"style\");\n  // Put the style into the a textNode\n  const styleNode = document.createTextNode(styleSelection);\n  // Append that textNode to the styleElement\n  styleElem.appendChild(styleNode);\n  // Append the styleElement to the head tag\n  document.head.appendChild(styleElem);\n\n  // Create an element to append to the document\n  const cplElement = document.createElement(\"div\");\n  // Setting content, but this isn't necessary\n  cplElement.textContent = \"CPL\";\n  // Append element to body\n  document.body.appendChild(cplElement);\n\n  // Set up a listener to listen for the \"selectionchange\" event\n  // this fires when you used the mouse/trackpad to select text in the webpage\n  // And let's debouce this event because we don't want this to fire until\n  //    the user has finished selecting text\n  document.addEventListener(\n    \"selectionchange\",\n    debounce(() => {\n      let selected = window.getSelection();\n      let selectedString = selected.toString();\n      let selectedLength = selectedString.length;\n      let { xPosition, yPosition } = getPosition(\n        selected.anchorNode.parentElement\n      );\n\n      if (selectedLength < 1) {\n        cplElement.style.top = 0;\n        cplElement.style.left = 0;\n        cplElement.style.opacity = 0;\n        return;\n      }\n\n      //selectedElement.innerHTML = cpl;\n      cplElement.textContent = `CPL: ${selectedLength}`;\n      cplElement.style.top = yPosition - cplElement.offsetHeight + \"px\";\n      cplElement.style.left = xPosition + \"px\";\n      cplElement.style.opacity = 1;\n\n      // console.log(selected);\n      // console.log(x, y);\n    })\n  );\n\n  // Lets debounce the MouseSelect on every character selected\n  // No need to display a number until the user has stopped selecting characters\n  function debounce(fn, time = 1000) {\n    let timeout;\n\n    return function() {\n      let functionCall = () => fn.apply(this, arguments);\n\n      clearTimeout(timeout);\n      timeout = setTimeout(functionCall, time);\n    };\n  }\n\n  // We need a function to find the position of the selected element\n  // The issue is that the selected elements position is effected by\n  // the border, margin and padding of all the other elements that it\n  // might be nested inside of\n\n  function getPosition(element) {\n    // Create some variables that will be mutated (reassigned)\n    let xPosition = 0;\n    let yPosition = 0;\n\n    // Now we need to walk up the DOM and sum all the spacing\n    // responsible for effecting the positioning of our selected element\n    while (element.tagName != \"BODY\") {\n      xPosition += element.offsetLeft + element.clientLeft;\n      yPosition += element.offsetTop + element.clientTop;\n\n      //console.log(element.tagName);\n      element = element.offsetParent;\n      //console.log(element.tagName);\n    }\n\n    return { xPosition, yPosition };\n  }\n\n  // <p class=\"cpl__box\">CPL = ${selectedLength || ''}</p>\n\n  // function cpl(e, min, mid, max) {\n  //   console.log(e.target.textContent.length);\n  // }\n\n  // document.addEventListener('click', cpl)\n};\n"]}